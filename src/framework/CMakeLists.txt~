AUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR} ${PROJECT_NAME}_LIB_SRCS)
AUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/../cas ${PROJECT_NAME}_LIB_CAS_SRCS)
AUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/../jni ${PROJECT_NAME}_LIB_JNI_SRCS)

SET(SOURCES
  ${${PROJECT_NAME}_LIB_SRCS}
  ${${PROJECT_NAME}_LIB_CAS_SRCS}
  ${${PROJECT_NAME}_LIB_JNI_SRCS}
  )

ADD_LIBRARY(uima SHARED ${SOURCES})

# TARGET_COMPILE_OPTIONS(uima PRIVATE -Wno-deprecated)
target_link_libraries(uima ${catkin_LIBRARIES})

FIND_PACKAGE(XercesC)
IF(XercesC_FOUND)
  INCLUDE_DIRECTORIES(${XercesC_INCLUDE_DIRS})
  TARGET_LINK_LIBRARIES(uima ${XercesC_LIBRARIES})
ELSE(XercesC_FOUND)
  MESSAGE(FATAL_ERROR "XercesC library not found")
ENDIF(XercesC_FOUND)

FIND_PACKAGE(APR)
IF(APR_FOUND)
  INCLUDE_DIRECTORIES(${APR_INCLUDE_DIR}, ${APRUTIL_INCLUDE_DIR})
  TARGET_LINK_LIBRARIES(uima ${APR_LIBRARIES} ${APRUTIL_LIBRARIES})
ELSE(APR_FOUND)
  MESSAGE(FATAL_ERROR "APR library not found")
ENDIF(APR_FOUND)

FIND_PACKAGE(JNI)
IF(JNI_FOUND)
  INCLUDE_DIRECTORIES(${JNI_INCLUDE_DIRS})
ELSE(JNI_FOUND)
  MESSAGE(FATAL_ERROR "JNI library not found")
ENDIF(JNI_FOUND)

# target_link_libraries(uima)
INCLUDE_DIRECTORIES(uima PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/include)
INCLUDE_DIRECTORIES(uima PUBLIC ${CMAKE_CURRENT_SOURCE_DIR})
INCLUDE_DIRECTORIES(uima PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/../cas/include)
INCLUDE_DIRECTORIES(uima PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/../jni/include)
SET_TARGET_PROPERTIES(uima PROPERTIES VERSION 2.4.1 SOVERSION 2)

########### install files ###############
INSTALL(TARGETS uima DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION})
INSTALL(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/../cas/include/uima DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION})
INSTALL(DIRECTORY  ${CMAKE_CURRENT_SOURCE_DIR}/../jni/include/uima DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION})
INSTALL(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/include/uima DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION})
