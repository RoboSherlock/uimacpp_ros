# AUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR} ${PROJECT_NAME}_UTIL_SRCS)
# ADD_LIBRARY(deployCpp deployCppService.cpp)
ADD_EXECUTABLE(runAECpp runAECpp.cpp)

TARGET_LINK_LIBRARIES(runAECpp ${catkin_LIBRARIES})

FIND_PACKAGE(XercesC)
IF(XercesC_FOUND)
  INCLUDE_DIRECTORIES(${XercesC_INCLUDE_DIRS})
  TARGET_LINK_LIBRARIES(runAECpp ${XercesC_LIBRARIES})
ELSE(XercesC_FOUND)
  MESSAGE(FATAL_ERROR "XercesC library not found")
ENDIF(XercesC_FOUND)

FIND_PACKAGE(APR)
IF(APR_FOUND)
  INCLUDE_DIRECTORIES(${APR_INCLUDE_DIR}, ${APRUTIL_INCLUDE_DIR})
  TARGET_LINK_LIBRARIES(runAECpp ${APR_LIBRARIES} ${APRUTIL_LIBRARIES})
ELSE(APR_FOUND)
  MESSAGE(FATAL_ERROR "APR library not found")
ENDIF(APR_FOUND)

FIND_PACKAGE(ICU)
IF(ICU_FOUND)
  INCLUDE_DIRECTORIES(${ICU_INCLUDE_DIRS})
  TARGET_LINK_LIBRARIES(runAECpp ${ICU_LIBRARIES})
ELSE(ICU_FOUND)
  MESSAGE(FATAL_ERROR "ICU library not found")
ENDIF(ICU_FOUND)

# INCLUDE_DIRECTORIES(uima PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/deployCppService.hpp)
INCLUDE_DIRECTORIES(uima PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/../cas/include)
INCLUDE_DIRECTORIES(uima PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/../framework/include)

TARGET_LINK_LIBRARIES(runAECpp uima)
